;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; Author: Erwin Mueller
;;; Version: game-map.plm,v 1.0

;;; Using Modules

(defmodule "DWARFHUSTLE-GAME-MAP-OBJECTS"
  :documentation "Defines objects of the game map."
  :includes ("PL-USER")
  :uses ("LOGIC" "STELLA" "DWARFHUSTLE-MATERIALS")
  )

(in-module "DWARFHUSTLE-GAME-MAP-OBJECTS")

;; clear any info from previous runs:
(clear-module "DWARFHUSTLE-GAME-MAP-OBJECTS")
(reset-features)

(defconcept ObjectType (?type)
  :documentation "Object type.")

(defconcept BlockObject (?t ObjectType)
  :documentation "Object type.")

(defconcept Building (?t ObjectType)
  :documentation "Building.")

(defrelation object-properties (?a ?b ?c))
  :documentation "Load object properties for the child type a from the parent type b."

(deffunction object-width ((?o ObjectType)) :-> (?result INTEGER))
  :documentation "Returns the width of the object."

(deffunction object-height ((?o ObjectType)) :-> (?result INTEGER))
  :documentation "Returns the height of the object."

(deffunction object-depth ((?o ObjectType)) :-> (?result INTEGER))
  :documentation "Returns the depth of the object."

(deffunction object-passable ((?o ObjectType)) :-> (?result INTEGER))
  :documentation "Returns the depth of the object."

(deffunction object-build-input-units ((?o ObjectType) (?m ObjectType)) :-> (?result INTEGER))
  :documentation "Returns a required object to build the object."

(assert (= (object-width BlockObject) 1))
(assert (= (object-height BlockObject) 1))
(assert (= (object-depth BlockObject) 1))

(assert (BlockObject block-normal)) :documentation "Not mined out block block."
(assert (BlockObject block-water)) :documentation "Water block."
(assert (BlockObject block-ceiling)) :documentation "Ceiling block."
(assert (BlockObject block-select)) :documentation "Selected block."
(assert (BlockObject block-focus)) :documentation "Focused block."
(assert (BlockObject block-ramp-corner-ne)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-corner-nw)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-corner-se)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-corner-sw)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-edge-in-ne)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-edge-in-nw)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-edge-in-se)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-edge-in-sw)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-edge-out-ne)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-edge-out-nw)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-edge-out-se)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-edge-out-sw)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-perp-n)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-perp-e)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-perp-s)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-perp-w)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-single)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-tri-n)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-tri-e)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-tri-w)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-tri-s)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-two-ne)) :documentation "Not mined out ramp."
(assert (BlockObject block-ramp-two-se)) :documentation "Not mined out ramp."
