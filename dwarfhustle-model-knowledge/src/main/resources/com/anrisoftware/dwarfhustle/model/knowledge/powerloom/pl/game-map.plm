;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; Author: Erwin Mueller
;;; Version: game-map.plm,v 1.0

;;; Using Modules

(defmodule "DWARFHUSTLE-GAME-MAP"
  :documentation "Defines the map where buildings are placed."
  :includes ("PL-USER")
  :uses ("LOGIC" "STELLA" "DWARFHUSTLE-MATERIALS")
  )

(in-module "DWARFHUSTLE-GAME-MAP")

;; clear any info from previous runs:
(clear-module "DWARFHUSTLE-GAME-MAP")
(reset-features)

(defconcept Season (?s)
  :documentation "Seasons.")

(assert (Season spring)) :documentation "Spring season."
(assert (Season summer)) :documentation "Summer season."
(assert (Season autumn)) :documentation "Autumn season."
(assert (Season winter)) :documentation "Winter season."

(defconcept Month (?m)
  :documentation "Months.")

(assert (Month january)) :documentation "January."
(assert (Month february)) :documentation "February."
(assert (Month march)) :documentation "March."
(assert (Month april)) :documentation "April."
(assert (Month may)) :documentation "May."
(assert (Month june)) :documentation "June."
(assert (Month july)) :documentation "July."
(assert (Month august)) :documentation "August."
(assert (Month september)) :documentation "September."
(assert (Month october)) :documentation "October."
(assert (Month november)) :documentation "November."
(assert (Month december)) :documentation "December."

(deffunction year-days () :-> (?result INTEGER)
  :documentation "Sets the result block type based on the neighbor of the block in the specific direction.")

(assert (= (year-days) 360))

(defconcept Climate-Zone (?m)
  :documentation "Climate zones.")

(assert (Climate-Zone Polar-desert)) :documentation "Polar desert."
(assert (Climate-Zone Subpolar-dry-tundra)) :documentation "Subpolar dry tundra"
(assert (Climate-Zone Subpolar-moist-tundra)) :documentation "Subpolar moist tundra."
(assert (Climate-Zone Subpolar-wet-tundra)) :documentation "Subpolar wet tundra."
(assert (Climate-Zone Subpolar-rain-tundra)) :documentation "Subpolar rain tundra."
(assert (Climate-Zone Boreal-desert)) :documentation "Boreal desert."
(assert (Climate-Zone Boreal-dry-scrub)) :documentation "Boreal dry scrub."
(assert (Climate-Zone Boreal-moist-forest)) :documentation "Boreal moist forest."
(assert (Climate-Zone Boreal-wet-forest)) :documentation "Boreal wet forest."
(assert (Climate-Zone Boreal-rain-forest)) :documentation "Boreal rain forest."
(assert (Climate-Zone Cool-temperate-desert)) :documentation "Cool temperate desert."
(assert (Climate-Zone Cool-temperate-desert-scrub)) :documentation "Cool temperate desert scrub."
(assert (Climate-Zone Cool-temperate-steppe)) :documentation "Cool temperate steppe."
(assert (Climate-Zone Cool-temperate-moist-forest)) :documentation "Cool temperate moist forest."
(assert (Climate-Zone Cool-temperate-wet-forest)) :documentation "Cool temperate wet forest."
(assert (Climate-Zone Cool-temperate-rain-forest)) :documentation "Cool temperate rain forest."
(assert (Climate-Zone Warm-temperate-desert)) :documentation "Warm temperate desert."
(assert (Climate-Zone Warm-temperate-desert-scrub)) :documentation "Warm temperate desert scrub."
(assert (Climate-Zone Warm-temperate-thorn-scrub)) :documentation "Warm temperate thorn scrub."
(assert (Climate-Zone Warm-temperate-dry-forest)) :documentation "Warm temperate dry forest."
(assert (Climate-Zone Warm-temperate-moist-forest)) :documentation "Warm temperate moist forest."
(assert (Climate-Zone Warm-temperate-wet-forest)) :documentation "Warm temperate wet forest."
(assert (Climate-Zone Warm-temperate-rain-forest)) :documentation "Warm temperate rain forest."
(assert (Climate-Zone Subtropical-desert)) :documentation "Subtropical desert."
(assert (Climate-Zone Subtropical-desert-scrub)) :documentation "Subtropical desert scrub."
(assert (Climate-Zone Subtropical-thorn-woodland)) :documentation "Subtropical thorn woodland."
(assert (Climate-Zone Subtropical-dry-forest)) :documentation "Subtropical dry forest."
(assert (Climate-Zone Subtropical-moist-forest)) :documentation "Subtropical moist forest."
(assert (Climate-Zone Subtropical-wet-forest)) :documentation "Subtropical wet forest."
(assert (Climate-Zone Subtropical-rain-forest)) :documentation "Subtropical rain forest."
(assert (Climate-Zone Tropical-desert)) :documentation "Tropical desert."
(assert (Climate-Zone Tropical-desert-scrub)) :documentation "Tropical desert scrub."
(assert (Climate-Zone Tropical-thorn-woodland)) :documentation "Tropical thorn woodland."
(assert (Climate-Zone Tropical-very-dry-forest)) :documentation "Tropical very dry forest."
(assert (Climate-Zone Tropical-dry-forest)) :documentation "Tropical dry forest."
(assert (Climate-Zone Tropical-moist-forest)) :documentation "Tropical moist forest."
(assert (Climate-Zone Tropical-wet-forest)) :documentation "Tropical wet forest."
(assert (Climate-Zone Tropical-rain-forest)) :documentation "Tropical rain forest."

(defconcept BlockType (?type)
  :documentation "Tile type.")

(assert (BlockType block-filled)) :documentation "Filled with solid."
(assert (BlockType block-empty)) :documentation "Filled with gas."
(assert (BlockType block-liquid)) :documentation "Filled with liquid."
(assert (BlockType block-ramp)) :documentation "Ramp block."
(assert (BlockType block-floor)) :documentation "Floor block."
(assert (BlockType block-roof)) :documentation "Roof block."
(assert (BlockType block-visible)) :documentation "Block visible."
(assert (BlockType block-hidden)) :documentation "Block hidden."

(defconcept LightType (?type)
  :documentation "Light type.")

(assert (LightType light-dark)) :documentation "Dark is where no sun light can reach."
(assert (LightType light-natural)) :documentation "Natural light is light from the sun."
(assert (LightType light-artificial)) :documentation "Artificial light is light from some light source other than the sun."

(defconcept RoofType (?type)
  :documentation "Roof type.")

(assert (RoofType roof-no)) :documentation "No roof."
(assert (RoofType roof-natural)) :documentation "Natural roof."
(assert (RoofType roof-constructured)) :documentation "Constructed roof."

(defconcept FloorType (?type)
  :documentation "Floor type.")

(assert (FloorType floor-no)) :documentation "No Floor."
(assert (FloorType floor-natural)) :documentation "Natural Floor."
(assert (FloorType floor-constructured)) :documentation "Constructed Floor."

(defconcept NeighborDir (?dir)
  :documentation "Direction of the neighbor.")
(assert (NeighborDir dir-n)) :documentation "North direction."
(assert (NeighborDir dir-s)) :documentation "South direction."
(assert (NeighborDir dir-e)) :documentation "East direction."
(assert (NeighborDir dir-w)) :documentation "West direction."

(deffunction neighbor ((?typea BlockType) (?dir NeighborDir) (?typeb BlockType)) :-> (?result BlockType)
  :documentation "Sets the result block type based on the neighbor of the block in the specific direction.")
(assert (= (neighbor block-filled dir-n block-filled) block-hidden))
(assert (= (neighbor block-filled dir-n block-empty) block-visible))
(assert (= (neighbor block-filled dir-s block-filled) block-hidden))
(assert (= (neighbor block-filled dir-s block-empty) block-visible))
(assert (= (neighbor block-filled dir-e block-filled) block-hidden))
(assert (= (neighbor block-filled dir-e block-empty) block-visible))
(assert (= (neighbor block-filled dir-w block-filled) block-hidden))
(assert (= (neighbor block-filled dir-w block-empty) block-visible))
