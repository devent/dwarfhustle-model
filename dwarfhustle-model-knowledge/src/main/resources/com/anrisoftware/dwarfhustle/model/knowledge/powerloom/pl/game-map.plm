;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; Author: Erwin Mueller
;;; Version: game-map.plm,v 1.0

;;; Using Modules

(defmodule "DWARFHUSTLE-GAME-MAP"
  :documentation "Defines the map where buildings are placed."
  :includes ("PL-USER")
  :uses ("LOGIC" "STELLA" "DWARFHUSTLE-MATERIALS")
  )

(in-module "DWARFHUSTLE-GAME-MAP")

;; clear any info from previous runs:
(clear-module "DWARFHUSTLE-GAME-MAP")
(reset-features)

(defconcept BlockType (?type)
  :documentation "Tile type.")

(assert (BlockType block-filled)) :documentation "Filled with solid."
(assert (BlockType block-empty)) :documentation "Filled with gas."
(assert (BlockType block-liquid)) :documentation "Filled with liquid."
(assert (BlockType block-ramp)) :documentation "Ramp block."
(assert (BlockType block-floor)) :documentation "Floor block."
(assert (BlockType block-visible)) :documentation "Block visible."
(assert (BlockType block-hidden)) :documentation "Block hidden."

(defconcept LightType (?type)
  :documentation "Light type.")

(assert (LightType light-dark)) :documentation "Dark is where no sun light can reach."
(assert (LightType light-natural)) :documentation "Natural light is light from the sun."
(assert (LightType light-artificial)) :documentation "Artificial light is light from some light source other than the sun."

(defconcept RoofType (?type)
  :documentation "Roof type.")

(assert (RoofType roof-no)) :documentation "No roof."
(assert (RoofType roof-natural)) :documentation "Natural roof."
(assert (RoofType roof-constructured)) :documentation "Constructed roof."

(defconcept FloorType (?type)
  :documentation "Floor type.")

(assert (FloorType floor-no)) :documentation "No Floor."
(assert (FloorType floor-natural)) :documentation "Natural Floor."
(assert (FloorType floor-constructured)) :documentation "Constructed Floor."

(defconcept NeighborDir (?dir)
  :documentation "Direction of the neighbor.")
(assert (NeighborDir dir-n)) :documentation "North direction."
(assert (NeighborDir dir-s)) :documentation "South direction."
(assert (NeighborDir dir-e)) :documentation "East direction."
(assert (NeighborDir dir-w)) :documentation "West direction."

(deffunction neighbor ((?typea BlockType) (?dir NeighborDir) (?typeb BlockType)) :-> (?result BlockType)
  :documentation "Sets the result block type based on the neighbor of the block in the specific direction.")
(assert (= (neighbor block-filled dir-n block-filled) block-hidden))
(assert (= (neighbor block-filled dir-n block-empty) block-visible))
(assert (= (neighbor block-filled dir-s block-filled) block-hidden))
(assert (= (neighbor block-filled dir-s block-empty) block-visible))
(assert (= (neighbor block-filled dir-e block-filled) block-hidden))
(assert (= (neighbor block-filled dir-e block-empty) block-visible))
(assert (= (neighbor block-filled dir-w block-filled) block-hidden))
(assert (= (neighbor block-filled dir-w block-empty) block-visible))
